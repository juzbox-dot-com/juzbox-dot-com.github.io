{"pages":[{"url":"http://www.juzbox.com/notes/","tags":"pages","text":"特定のテーマについての少しまとまった文章やメモ． 正確性は保証できません． よく見かける薬 精神障害の分類","title":"Notes"},{"url":"http://www.juzbox.com/projects/","tags":"pages","text":"つれづれなるままにつくったものたち． 心理テスト TEG2 POMS LrcShow OSXのiTunesで再生中の曲の同期歌詞を表示します． Sonogram マイクからの入力をリアルタイムでソノグラムとして表示します．","title":"Projects"},{"url":"http://www.juzbox.com/2016-05-04/realforce/","tags":"diary","text":"REALFORCEといえば，言わずと知れた東プレから販売されている静電容量無接点方式のキーボードです． 配列（US，JIS）や，キートップの色（黒か白），キーの荷重（変荷重，30g, 45g, 55g），テンキーレスか否か，静音タイプか否か，といった違いにより，多数のモデルが販売されています． これまでずっとUS配列のキーボードを使ってきたけれど，職場ではJIS配列を使わざるを得ず，これを機にJIS配列に移行しようかとも思いましたが，記号の配列がやはり気になり（\"[\"と\"]\"が隣り合っていないなど），結局US配列に決めました． テンキーレスモデルの方が値段が高いのは戴けないと，貧乏性がでてしまい，テンキーありの最もオーソドックスと思われるモデルを購入しましたが，少し後悔．テンキーを使う機会は滅多にないし，右手のホームポジションとポインティングデバイスとの距離が空いてしまい，右手の移動量が多くなってしまうのですね．机の場所も多く専有してしまうし． とはいえ打鍵感は極めて心地よく，買ってよかったと思います． OSXでのUS104キーボードを快適に使う設定について， 別の記事 でまとめました．","title":"REALFORCEを買ってみた"},{"url":"http://www.juzbox.com/2016-05-04/us-kbd-on-osx/","tags":"tech","text":"OSXで修飾キーなどのキーバインドを変更する方法としては， \"System Preferences\"の\"Modifier keys\" Seil / Karabiner などがありますが，後者の方が圧倒的に柔軟です．ここでは，US104配列のキーボードでの僕の設定を備忘録としてメモしておきます． 僕は，下の表のようにリマップしています．（過去にWindowsを使っていた頃の癖が抜けず，コピーやペーストには左下のキーを使ってしまうので，CtrlをCommandにbindしています．） 変更前 変更後 Caps Lock Ctrl lt. Ctrl lt. Command lt. Windows lt. Option lt. Alt lt. Command rt. Alt rt. Command rt. Windows rt. Option Application Fn 下の画像の通りSeil, Karabinerを設定することで，上記通りのマッピングに加えて，スペースキーの両脇のキーで日本語/英語入力切り替え，Fnキーとの同時押しでの輝度や音量の調節などが実現できました． （SeilでApplicationキーをFnにバインドすると，どうにもうまくFnとファンクションキーとの同時押しでの輝度等の調整ができなかったので，これだけKarabinerでリマップしています．）ご参考になれば幸いです．","title":"OSX 日本語環境でUS配列キーボードを快適に使う"},{"url":"http://www.juzbox.com/2016-05-03/restart/","tags":"diary","text":"ふと思い立って，1年半前に用意したウェブサイトを復活させることにしました． 単に放置していただけで，サイトはずっとそこにあったのだから，復活というのもおかしな話かもしれないけれど． （久々にまとまった時間がとれたので，テーマも少し更新して，Bootstrap 3を使うようにしてみたり．） ブログを書いて，自分の日常をネットの海に垂れ流そうと企図したことがこれまでにも何度かあったのだけど，結局そのどれも続かず，2，3回記事を書いてあとは放置してしまっていました． そう考えると，このウェブサイトの更新だっていつまで続くのか相当怪しいものですね．もとより，自分を外に発信しようという志向が希薄なのだと想います． この際せっかくだから，昔のブログや，ローカルにこっそり書き溜めていた日記も，新しいサイトにまとめようかと思って，作り散らかした過去の文書を掘り起こしていました．結局，あまりにプライベートな内容が多く，ここに掲載するのはやめることにしましたが，改めて振り返ってみると四畳半神話大系の最終回のように，無味乾燥に思えた日々もそれなりに肯定的に受容することができたように思いますし，これらの経験の堆積した結果として今があるのだと改めて感じました．","title":"地層"},{"url":"http://www.juzbox.com/2015-02-10/med-license-exam/","tags":"diary","text":"第109回医師国家試験を受けてきました 受験番号で試験会場や受験する教室が決まるのですが， カンニング防止のためか，どうやら番号はランダムに割り振られているようで， 氏名の五十音順や出身大学，住所と会場との近さなどの規則性は全く見出せませんでした． 関東信越厚生局所管の受験地は東京都と新潟県で，東京都はここ数年， 大正大学と調布のNTT研修センターが会場になっているのですが， 大正大学まで徒歩圏内に下宿している同期も調布の会場に送り込まれていました…． しばらく昼夜逆転生活が続いてしまっていたので，試験をちゃんと受けに行かれるか不安でしたが，何とかなりました． 全国の会場で同じ時間割で試験を行っているため，万が一トラブルが起きた際に対処する時間的余裕を確保するためでしょうか， 問題冊子を配られてから試験開始までに長い時間が空くことが多く，何もできないその時間が手持ち無沙汰で嫌でした． 僕が受験した教室には100人くらい収容されていて，大学の同期は僕の他にもう1人だけでした． まぁ9000人弱いる受験生のうち東京に約5000人が集中しているので，1大学あたり受験生が約100人いると考えると 同期の割合はおよそ1/50．休み時間には教室の外に出れば，他の教室の人とも会って話ができますが， 東京の会場では教室の中では割りと寂しい思いをすることになります（少なくとも知り合い同士でワイワイできる可能性は低いでしょう）． 試験は2/7(土)〜2/9(月)の3日間で，毎日3ブロックずつに分かれています． ブロックには各論，総論，必修があり，各ブロックには知識をストレートに問う一般問題と，与えられた症例に関する設問に答える臨床問題（問題文が年齢，性別で始まっている）が含まれています． ブロック 時間 区分 問題数 A 2/7(土) 9:30-11:30 (120分) 各論 一般 20問，臨床 40問 B 2/7(土) 13:15-15:00 (105分) 総論 一般 40問，臨床 22問 C 2/7(土) 16:00-17:00 (60分) 必修 一般 15問，臨床 16問 D 2/8(日) 9:30-11:30 (120分) 各論 一般 20問，臨床 40問 E 2/8(日) 13:00-15:00 (120分) 総論 一般 40問，臨床 29問 F 2/8(日) 16:00-17:00 (60分) 必修 一般 15問，臨床 16問 G 2/9(月) 9:30-11:30 (120分) 総論 一般 20問，臨床 49問 H 2/9(月) 12:45-14:00 (75分) 必修 一般 20問，臨床 18問 I 2/9(月) 14:40-17:00 (140分) 各論 一般 40問，臨床 40問 合格判定は， 各論・総論ブロックの一般問題200問の正答率が相対基準（例年，6割後半くらい）を満たすこと 各論・総論ブロックの臨床問題200問の正答率が相対基準（例年，7割くらい）を満たすこと 必修ブロックの一般問題50問，臨床問題50問については，一般問題を1点，臨床問題を3点として合計し，200点中160点(80%)以上を得点すること 禁忌肢の選択数が3個以下であること の4条件全てを満たした場合に合格となります．相対基準は例年だいたい偏差値30前後の点数に設定されているようです． 合格率は例年90%前後になっています．僕も9割は通る試験だと高を括っていましたが，問題集に載っている過去問の正答率が， 簡単な問題では90%後半になっていて，そもそもある程度知識のある者しか受験していないのだな，と改めて感じました． 皆（少なくとも卒業できる程度には）医学を学んできた集団の中で相対評価で下1割が落ちる，ということになります． 本来，資格試験は選抜試験とは違って，必要な知識を具えているかどうかを確認するためのものなのだから，そこに 相対評価を持ち込むのはいかがなものかとも思いますが，毎年試験問題は入れ替わるのに対し， 受験生のレベルは毎年ある程度一定であると考えられるので，相対基準を導入することはやむを得ないのでしょう． このうち，各論・総論の一般・臨床問題は，知識を増やしていけばそれに応じて点数が伸びていく感じがあるのですが， 8割以上の得点が求められる必修ブロックが鬼門のように感じました． 上述したとおり，必修ブロックについては，一般問題と臨床問題の点数を足した合計点が合格基準になっているのですが， 臨床問題の重みが3倍あります．50問ある臨床問題を1つ間違えると，落とせる20%のうち1.5%を一気に消費してしまいますので， かなり緊張します． 必修ブロックは80%の得点を求められるだけあり，全般的には有名で典型的な易しめの問題が多いのですが， 「医師としての基本的姿勢を含めた基本的診療能力を主題として出題する」という趣旨のため， 診断が不明な状況での初期対応を問うものや，どれも妥当な選択肢の中から 最も 適切なものを選ぶものなど， 独特の解きにくさをもつ問題も含まれており，問題数の少なさも相まって，点数が一番ブレやすい範囲となっています． （センター試験の国語に似たいやらしさ，とでも言えばいいのでしょうか．） 例えば，今年の必修ブロックで出題され，話題になった問題を2題，取り上げてみます． 109F21 50歳の女性．料理中に包丁で指を切ったため来院した．左中指に巻いているハンカチから血液がしたたり落ちている．意識は清明．体温36.2℃．脈拍80/分，整．血圧106/78mmHg．呼吸数12/分．左中指に1.5cmの切創を認める． まず確認すべきなのはどれか． a 異物 b 腱損傷 c 神経損傷 d 指動脈損傷 e 皮膚欠損範囲 aの異物とdの動脈で割れていて，大変話題になりました．5つの選択肢はいずれも確認すべきものとしてある程度妥当ですが，「まず」と問われているので，急いで処置する必要があるものを考えるべきでしょう．この観点で考えると，感染を防ぐため，「異物」の有無を確認し，除去，洗浄を行うべきでしょうし，動脈性に出血していれば，量が多ければ止血を急がなくてはなりませんし，状況によっては切創より末梢側を阻血から救うために吻合も必要かも知れません．これら2つに順位付けをさせるのはナンセンスではないかと感じます． 109H25 46歳の女性．頭痛を主訴に来院した．本日午前6時に起床しトイレに行ったところ，突然の激しい頭痛が生じ悪心と嘔吐とがあった．臥床して様子をみたが頭痛が改善しないため午後2時に歩いて受診した．意識は清明．体温37.2℃．脈拍84/分，整．血圧198/102mmHg．項部硬直を認める． まず行うべき処置はどれか． a 解熱 b 降圧 c 制吐 d 鎮静 e 鎮痛 くも膜下出血が強く示唆される病歴や診察所見ですが，CT撮影前で診断は未確定という状況での最初の処置を問う問題でした． bの降圧を選んだ受験生が多く，解答は割れてこそいませんが，痛みで不穏状態だったら鎮静も必要だろうし， 鎮静すれば血圧も下がりそうだとか，痛みが血圧上昇に寄与している可能性が高いから降圧の前にまず鎮痛して血圧の変化を見るべきだろうかとか， 考え出すと降圧，鎮静，鎮痛どれも妥当な処置に思えます． 不適切な問題は削除されたり，複数が解答となったり，不正解の場合は採点除外となることもありますが， そういった措置は合格者数の調整の意味合いもあるため，純粋な問題の医学的妥当性だけでなく，不正解選択肢を選んだ受験生の割合や， 受験生の試験全体の出来具合も加味して決定されているようです．（例えば，109H25で降圧が厚労省の意図する正解であった場合，多くの受験者が正解選択肢を選んでいるから問題は妥当であると判断されて，削除にならない可能性が高いと思います．） そもそもこれらの際どい問題の正解如何で合否が分かれるような点数を取るヤツが悪いという指摘もあるようですし， 難易度の調整のために敢えて解答が割れるような問題を入れているのではないかという意見もあるようですが， 現役医師の間でも意見が分かれるような微妙な問題を，しかも1問あたりの比重が大きい必修で出題するのは 勘弁してほしいと僕は感じました． （もちろん，記述式ではなくマークシート方式で，差がつく問題を作るのはとても労力がかかる作業なのだろうとは推察しますし， 500問のうち殆どの問題は適切なものだったと思います．しかしながら，上で挙げたような微妙な設問が少数でも混ざっていると， それらの腑に落ちない印象が強く残り，受験の後味が一気に悪いものになってしまうのではないでしょうか．）","title":"医師国家試験を受けてきました"},{"url":"http://www.juzbox.com/2014-11-14/141114/","tags":"diary","text":"予定調和的に今日も午後起き．もう仕方あるまい，そういうものだと腹をくくって，起きている時間をいかに豊かにするかを考えることにします．今日は結局，行きつけのファミレスで，無慈悲なビデオ講座板書写経マシーンになっていました．小児科，成長・発達のあたりが辛いけど，各論に入ると聞き覚えのあるものも多く，少し安心感が出てきました． 帰宅後は，国試の願書を書きました．マッチングの出願書類を用意する時にも感じたことだけれど，手書きで公的な書類を書くの，変な気を使ってすごく疲れます．手書き文化は早く滅んでほしいです．就活でも誠意を見るために手書きを指定するとか言う話を聞いたことがあるけれど，そういう根性論みたいなのはどこかに消えてなくなってほしいものです．アメリカはCVも印刷がデフォだと聞くし，字も汚い人が多い印象あるし，その辺はとても合理的で好ましく感じます． その願書，黒または青のボールペンで記入するよう指定されているのだけど，フォームが黒インクで印刷されているから，自分で書いたところが区別しやすいようにと思い，青ボールペンで記入しておきました．調べてみると，欧米ではボールペンは青色が基本だけど，どうやら日本では，墨と筆で書いていた頃の名残りか，黒で書くのが常識とされているらしいです．服装自由と言われたのでラフな格好で説明会に行ってみたら，周りが皆スーツで，私服の人はバイバイになるのと似たような感じで，黒または青と指定しつつ，青で書類が書いてあったら，その時点で非常識と判断されて落とされる，みたいな就活の闇がひょっとしたらあるのかも知れません．そういう世界とは，可能であれば関わりたくないな．今回は，書類の提出先が，採用選考先等でなくて，資格試験を行うお役所なので，要件をきちんと満たしてさえいれば，相手に与える心象などは気にかける必要はないのですが．","title":"141114"},{"url":"http://www.juzbox.com/2014-11-13/141113/","tags":"diary","text":"このところ当たり前のようになってきている午後起きをキメて，研究室へ．これまでの結果の確認的な意味合いで，これで終わりにしようと思っていた実験の結果が，解釈に困るもので，つらみがあります．群内でのバラつきも結構大きく，nが足りない感もあるし，そもそも今用いている系だけから現象を説明するのは無理があるような…．でもnを増やしたり，新しい系を立ち上げて検証するのに十分な時間がもうないのですよね．どうしたものか． 夜は学科の同期に誘ってもらって，牡蠣を食べました．値は結構張ったけど，（恐らく）生まれて初めて（！）生牡蠣を食べられたし，牡蠣フライや焼き牡蠣も牡蠣を専門に取り扱っているお店だけあってなかなか美味だったので満足．友人たちもやはり午後起き勢になっていて，ダメな種類の安心感を得ることができました． 帰宅後，ネットサーフィンをしていたら， やる夫で学ぶディジタル信号処理 というサイトを見つけました．そういえば，やる夫シリーズって数年前に流行ったなぁと懐かしみながらちょっと読み進めてみたら，なかなか面白い．時間ができたときにちゃんと読んでみようと思います．また， 人工知能に関する断創録 というサイトも見つけました．書いてるのがどんな人なのか分からない（学生なのかな？でもずいぶん前から記事を書いているようだ）けれど，興味の方向性が重なっている部分があり，blog筆者の旺盛な学習意欲にはとても刺激を受けました．多少なりとも僕も見習いたいものです．","title":"141113"},{"url":"http://www.juzbox.com/2014-11-12/141112/","tags":"diary","text":"7:30周辺に数分おきに合計10個くらいアラームをかけておいたのだけど，起きてみたらなんと12時を回っていた．普段，朝から（対外的な）予定があれば起きられているし，甘えだと言われたら確かにその通りなのかも知れないけれど，過眠を制御できなさがあって大変よろしくない．どうしたらいいんだろうこれ…． 家だと捗らない予感がしたので，近くのファミレスへ行くことに．25:30まで開いているので，今日のように行くのが遅くなっても長く居られるので，とても重宝しています．店員さんが来るたびに，離れ際に「ごゆっくりどうぞ」と言ってくるのだけど，それが皮肉にしか聞こえない（けれど，動じない程度には図々しさを身につけました）．ドリンクバーでコーヒーが飲み放題なので，集中力が切れたと思ったらカフェインを投下できて素晴らしい環境です． 僕は公共の空間で作業をするときはイヤフォンをしていることが多いのだけど，そこで何を聴くかが問題になります．数学のように言語を使わないタスクでは，だいたい何を聴いていてもパフォーマンスは大きく変わらないように思うけれど，言語が関わるようなタスク（文章の読み書き，国試の症例問題など）をこなす時は，ボーカルがあると経験的に効率が落ちると感じていたのでinstrumentalの音楽を聴くようにしていました．やはり，似たような質の情報が入ってくると，互いに干渉してしまうのでしょうね．ところが最近，同じ曲の無限リピートであればボーカル曲でも言語性タスクに殆ど影響しないという知見を得ました．ということで，少し気に入った曲を数時間無限リピートで聴き続けています．もはやボーカルは言葉としての意味を失い，曲は完全にpredictableな単なる聴覚刺激になっているのでしょう．西田幾多郎にとっての「哲学の道」のようなものでしょうか．自分でもちょっとどうなの，とは思いますが，聴覚はイヤフォン・ヘッドフォンの登場によりほぼ自分の思い通りに入力を制御できるので（これは他の感覚では現在なかなか実現できないことでしょう），他人の迷惑にならない限りにおいては，自分にとって都合のいい入力を追求していく態度があっても良いのではないでしょうか（適当）． ところで，人名のつく疾患というのが数多くあります．大抵の病気は「肥厚性幽門狭窄症」とか「抗リン脂質抗体症候群」といった感じで中心的な病態により名付けられていますが，報告された当初は病態がわかっていなかったり，その他の事情により，報告した人の名前で呼び習わされているものもあるのですね．（病態が目で見えない機能性の疾患や神経疾患，代謝異常，アレルギー・リウマチ疾患に比較的多い印象があります．）後から病態が判明した際に，人名を廃した名前をつけ直している場合もあります（橋本病→慢性甲状腺炎，Wegener肉芽腫症→多発血管炎性肉芽腫症，などなど．Wegenerはナチ党員だったので病名として不適切とされたという事情もあるとか．また，川崎病は小児急性熱性皮膚粘膜リンパ節症候群というたいそうな別名がついていますが，これはむしろ人名で呼んでくれた方がありがたいですね…．）が，やっぱり一度定着した名前は知っておかざるを得ないのですね．特に混乱するのが，先天性代謝異常(Gaucher, Tay-Sacks, von Gierke, Niemann-Pick, Fabry, Lesch-Nyhan, Pompe, etc...)，体質性黄疸(Crigler-Najjar, Gilbert, Dubin-Johnson, Rotor)，乳汁漏出性無月経(Chiari-Frommel, Argonz-del Castillo, Forbes-Albright)のあたりです．見かけるたびに人の名前と病態の対応を忘れて，いい加減にしてくれと思ってしまいます．","title":"141112"},{"url":"http://www.juzbox.com/2014-11-12/automatic-build-and-deploy/","tags":"tech","text":"静的サイトジェネレータでは，記事を書いたあと，手元の環境でビルドし，それをデプロイするのが普通の手順ですが，継続的インテグレーション(CI)サービスを使うことで，ビルド & デプロイをCIサービス上で行うことができます．記事を書いて，そのソースをcommit, pushすれば，しばらくすると勝手にサイトが更新されているというわけです．素敵ですね．これなら出先など，自分のPCが使えない環境でも，blogを更新できますよ〜． 今回は，サイトのホストとしてGitHub Pagesを用い，CIはGitHubの公開リポジトリに対しては無料で利用できるTravis CIを用いました．GitHub Pagesは独自ドメインにも対応しており，staticなファイルのホストに限っていえば，とても良い選択肢に思えます． PelicanのソースをGitHub上に載せておき，Travis CI上でPelicanを動かしてビルドし，それをGitHub pageのリポジトリ(username/username.github.ioなど)に自動でdeployさせるように設定します．ソースリポジトリにpushされると，CIがトリガされて勝手に走ります． 若干古い記事ですが，基本的には http://zonca.github.io/2013/09/automatically-build-pelican-and-publish-to-github-pages.html の手順通りでうまくいきました． 以下にいくつかの注意点をまとめておきます． 当然ながら， requirements.txt には適宜必要なパッケージを追加する Pythonのバージョンを手元の環境と揃えておくと良い make html とあるところを make publish に変更した（これで publishconf.py の設定も反映されるようになる） GitHubのtokenはDeploy先リポジトリのownerでログインして，Settings→Applications→Generate new tokenで作成できる．deploy先が公開リポジトリなら，Scopeはpublic_repoにチェック． .travis.yml も公開リポジトリ上に置かれるので，Travisがdeployするのに使うtokenを，Travis CIが生成した鍵ペアの公開鍵で暗号化してやる必要がある．この鍵はrepository-specificなので（この鍵ペアがもし全ユーザーで共通だったら，他人の暗号を自分の設置した .travis.yml に書いてTravisに復号させることで平文を得ることができてしまう！）， $ travis encrypt GH_TOKEN=TOKEN_FROM_GITHUB は生成元のソースリポジトリ（deploy先ではないよ）に移動して行う． ソースリポジトリでsubmoduleのurlがgit@github.com:user/repo.gitの形式になっている場合，Travisからcheckoutできずエラーになってしまう．これが起きたら， .travis.yml の before_install に - sed -i 's/git@github.com:/https:\\/\\/ github.com \\//' .gitmodules を加えて，on-the-flyで置換してやればよい． 初めてCIを使ったのですが，ログを眺めていると，CIが走る度にクリーンな環境から環境構築（必要なpythonパッケージたちのインストールやソースリポジトリのcheckout）をするところから始めていて，計算機資源を 無駄に 大変贅沢に使っている感がありました．CI上でのビルドからデプロイまでの一連の作業におおよそ2分半かかっていますが，そのうち2分以上はpythonパッケージのインストールに使われていました．なんだかなぁ．静的サイトジェネレータは地球にやさしいかと思っていましたが，CIを使った自動deployを組んだらむしろ無駄な計算機資源を食いつぶしていますね．そして，Travis CIさん，貴重な計算機資源をこんなどーでもいいブログに使ってしまいすみません．そしてマスコット（記事冒頭）がちょっと愛らしいですね．公開リポジトリなら無料で利用できるけれど，こんな大盤振る舞いしていて儲けが出せているのでしょうか．なんだかこちらが心配になってしまいます．なるべく無駄なpushは控えよう…．","title":"Travis CIを使った自動build & deploy"},{"url":"http://www.juzbox.com/2014-11-11/141111/","tags":"diary","text":"実習が終わってからというもの，ダレた生活が続いてしまっている．精神と身体の二元論的な捉え方はあまりに単純な図式であって，いろいろと無理があると思うところが多いけど，このところは，いかにして精神（あるいは，意思）の力で，怠惰な身体に鞭を打ち，生産性を高められるかが人生における重要な課題のように感じられています．このところの生産性のなさは自分でもちょっと引くレベルです…．どげんかせんといかん． 今日は目覚ましを3分ごとx2台仕掛けることで7時台の起床に成功．そこから集中して進めれば無理なく終えることが出来る程度の勉強の計画を立てていたのだけれど，結局途中でだれて，計画はおじゃんに．その代わりにできたのがこのblog…．なんだか始めたら楽しくなってきてしまい，Travis CI使った自動deployまで設定していました．（こんなしょーもないコンテンツのために，無料で提供してくれているCIサーバーのリソースを喰ってるの，申し訳なさがあります．）完全に逃避だ…． 解説を読む時間を含めて，臨床問題は3分，一般問題は1分強ほどかかる印象．（短い時間スケールで平均するとだいたい左の通りなんだけど，長い時間スケールで均すと，結局この通りのペースで進んだ試しがないのが情けないところ．途中で調べ物→飽きて他の関係ないことを始め出してしまう．意志が弱い！） 明日以降は，意志の力を発揮して，しっかりQBを解き進めていきたい（と毎日のように思って，結局思い通りに進まずじまい，というのをここのところ続けている…．もうダメだ．）．明日こそは！","title":"141111"},{"url":"http://www.juzbox.com/2014-11-11/first-post/","tags":"misc","text":"どうも自分が情報を発信するということをこれまで生きてきて殆どしたことがなかったのだけれど，友人・知人，あるいは面識のない方々のblogで日々の出来事に対する洞察や思考過程を読んだり，あるいは，もっと実用的に，調べ物の参考にしたりするにつけ，自分もinputしたものを再構成した結果を世に出す意味がなくはないのかも知れないなと感じた次第です． ということで，自分の考えを言語化する練習も兼ねて，（飽きっぽい僕のことだから，どれだけ続くかは怪しいものだけれど）とりあえずblogを開設しました．（無味乾燥な勉強に食傷気味だったからとも言う．） そもそも，blogひとつ始めるのにこんな能書きを垂れる必要，本当はないのかも知れませんね．ネットの大海にぽつんとちっちゃな旗を立てるようなものだから．最初のエントリなんて，それこそ「blog始めました」で良いでしょう．とりあえず，よろしくお願いいたします． ところで，このblogはPelicanというPythonで書かれたstatic site generatorを使って作られています．WordpressやGoogleが運営するBlogspotや「はてな」のようなブログエンジンは数多くありますが，それらはブラウザ上で編集し，そのデータはサーバー上のデータベースに保存されています．特定のサービス/ソフトウェアにlock-inされてしまうのも嫌だし，自分が書いたものは自分の手許に，管理しやすい形でもっておきたいという思いがあったので，今回はローカルでhtmlを生成するstatic site generatorを使ってみることにしました．そのほうが，ホストしてくれるサーバーの選択肢も豊富だし，なんか古き良きウェブの手作り感やぬくもりがあるような気もちょっとします．まぁ，手作りとはいいつつ，一から作る時間も気力もなく，結局は人様の作ったテーマやプラグインをいただいてきているのですが，それでもやっぱりお仕着せのブログよりはねぇ．はじめの設定には少し手間がかかりますが，使い始めてしまえば，あとは楽に運用できそうです．","title":"はじめてのとうこう"},{"url":"http://www.juzbox.com/2014-11-11/pelican-setup/","tags":"tech","text":"Pelicanでblogを構築しようなんて考えるのはたいていpython使いでしょうから，こんな記事を書いてもどうするんだ，とも思いますが，自分用の備忘録も込めて，Pelicanでのblog構築の手順を簡単にまとめておきます．環境はOSX 10.10 + Homebrewで入れたPython 3.4.2 + Pelican 3.5です． インストール インストールは http://docs.getpelican.com/en/3.5.0/install.html に従えばいい感じです． $ pip install pelican Markdown typogrify BeautifulSoup4 bs4は，僕が今回使ったElegantというテーマで必要なもので，テーマによっては不要です．ちなみに，テーマを管理する pelican-themes コマンドがsite-packagesにテーマをぶち込んだりしているのを見るにつけ，pelicanの開発者たちはvirtualenvを使うことを前提にしている感があるので，素直にvirtualenvの中でやるのが無難そうです． ひな形の作成 インストールが終わったら，適当なディレクトリを掘って $ pelican-quickstart で質問に答えていくとscaffoldを作ってくれます．これが終わった時点でgitのリポジトリを作っておくと良さそうです． 設定・プラグイン・テーマ 設定は基本的に pelicanconf.py に記述していきます．こいつは単なるpythonファイルなので，当然ですがもし中でいろいろやりたければ，好き放題にいろいろできます．また，テーマとプラグインを使えるようにしておきましょう．テーマについては， THEME = 'themes/pelican-elegant' のように， pelicanconf.py からの相対パスでテーマの場所を記述します．（上述した pelican-theme というコマンドもありますが，使う必要は全くありません．） プラグインについては， PLUGIN_PATH にプラグインたちが入ったディレクトリを指定し， PLUGINS にプラグイン名文字列のリストを指定します． githubにpelican公式の pelican-themes , pelican-plugins というリポジトリがあって，そこに多くのテーマやプラグインが集められています． 僕はテーマはどのみち自分が決めたものしか使わないので，ベースフォルダの下にthemesというフォルダを作って，その中に自分が使いたいテーマだけを git submodule add し，プラグインについては何を使いたくなるかわからないと思ったのでpelican-pluginsリポジトリをplugins以下に git submodule add することにしました． Elegant テーマは， Elegant というのを使うことにしました．見た目がすっきりしていて，responsiveであり，また，機能も豊富な感じで気に入りました．設定方法は， 作者のブログ に書かれています． 上の説明をよく読むとちゃんと書いてあるのですが，トップページに表示する自己紹介は， LANDING_PAGE_ABOUT = { 'title' : 'I \\' m a firecracker' , 'details' : '<h1>Bang!</h1>' } などと書くとそれが表示されます（htmlタグもそのまま書けるようです）． 記事を書く マークアップ言語としてはMarkdown, reStructuredText, htmlが使えますが，僕はMarkdownを使うことにしました．ファイル冒頭に以下の様な感じでメタデータを書いておきます．Titleは必須の属性で，ないとコンパイル時に怒られます． Title : 鳥類の体の構造 Category : misc Tags : pelican , sparrow , duck palicanconf.pyに FILENAME_METADATA = '(?P<date>\\d{4}-\\d{2}-\\d{2})_(?P<slug>.*)' と書いておくと， 2014-11-11_my-great-post.md というファイル名があったときに，そこからdateとslugのメタデータを抽出してくれます． 最後に このblogの生成元になっているソースを githubのリポジトリ に載せてあるので，もし必要があれば参照してください．また， https://github.com/getpelican/pelican/wiki/Powered-by-Pelican にPelicanを使っているサイトとそのソースが紹介されています．あの kernel.org も実はPelicanを使っていたのですね． それでは，皆様もPelicanで楽しいblogライフをお過ごしください！","title":"Pelicanを使ったサイト構築手順"}]}